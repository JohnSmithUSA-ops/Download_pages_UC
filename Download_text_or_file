/*
================================================================================
 Full Page Capture GUI — Browser Console Script
================================================================================

 INSTRUCTIONS — HOW TO USE
 --------------------------

 1. Chrome / Edge:
    - Open the page you want to capture.
    - Press F12 or Ctrl+Shift+I (Cmd+Opt+I on Mac) → open DevTools.
    - Go to the "Console" tab.
    - Paste this entire script and press Enter.
    - A floating "Page Capture" panel will appear (bottom-right corner).
    - Buttons:
        • Start Capture → saves page as .html (CSS + images inlined).
        • Copy Text → copies all text content (ignores copy-blockers).
        • Close → removes the panel.

 2. Firefox:
    - Open the page → press Ctrl+Shift+K (Cmd+Opt+K on Mac) → Console.
    - Paste script → Enter → use the floating GUI.
    - Note: Some cross-domain CSS/images may not inline due to CORS.

 3. Safari (Mac):
    - Enable "Develop" menu in Preferences → Advanced.
    - Open page → Cmd+Opt+C → Console.
    - Paste script → Enter → use the GUI.
    - Safari may block cross-domain fonts/images.

 Notes:
   - "Copy Text" button extracts text from the DOM (via innerText).
   - Works even if the site blocks right-click / drag-to-copy.
   - Status messages show progress.

================================================================================
*/

(() => {
  // ====== Full Page Capture with GUI ======

  // --- Helper Functions ---
  const sleep = (ms) => new Promise(r => setTimeout(r, ms));

  async function inlineCSS(doc) {
    const sheets = Array.from(doc.querySelectorAll('link[rel="stylesheet"]'));
    for (const link of sheets) {
      try {
        const href = link.href;
        const cssText = await fetch(href).then(r => r.text());
        const style = document.createElement('style');
        style.textContent = cssText;
        link.replaceWith(style);
      } catch (err) {
        console.warn('Failed to inline CSS:', link.href, err);
      }
    }
  }

  async function inlineImages(doc) {
    const imgs = Array.from(doc.querySelectorAll('img'));
    for (const img of imgs) {
      try {
        const src = img.src;
        if (!src.startsWith('data:')) {
          const blob = await fetch(src).then(r => r.blob());
          const reader = new FileReader();
          const dataUrl = await new Promise((res) => {
            reader.onloadend = () => res(reader.result);
            reader.readAsDataURL(blob);
          });
          img.src = dataUrl;
        }
      } catch (err) {
        console.warn('Failed to inline image:', img.src, err);
      }
    }
  }

  async function capturePage() {
    const clone = document.documentElement.cloneNode(true);
    const tempDoc = document.implementation.createHTMLDocument('');
    tempDoc.replaceChild(clone, tempDoc.documentElement);

    await inlineCSS(tempDoc);
    await inlineImages(tempDoc);

    const html = '<!DOCTYPE html>\n' + tempDoc.documentElement.outerHTML;
    const blob = new Blob([html], { type: 'text/html' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = (document.title || 'page') + '.html';
    a.click();
    setTimeout(() => URL.revokeObjectURL(a.href), 3000);
  }

  async function copyPageText() {
    try {
      const text = document.body.innerText || '';
      await navigator.clipboard.writeText(text);
      return true;
    } catch (err) {
      console.warn('Clipboard write failed, falling back:', err);
      // Fallback: textarea method
      const text = document.body.innerText || '';
      const ta = document.createElement('textarea');
      ta.value = text;
      document.body.appendChild(ta);
      ta.select();
      document.execCommand('copy');
      document.body.removeChild(ta);
      return true;
    }
  }

  // --- GUI Panel ---
  if (window.__pageCaptureGUI) {
    window.__pageCaptureGUI.remove();
  }

  const panel = document.createElement('div');
  panel.style.position = 'fixed';
  panel.style.bottom = '20px';
  panel.style.right = '20px';
  panel.style.padding = '10px';
  panel.style.background = 'rgba(0,0,0,0.8)';
  panel.style.color = '#fff';
  panel.style.fontFamily = 'sans-serif';
  panel.style.zIndex = 999999;
  panel.style.borderRadius = '6px';
  panel.style.boxShadow = '0 2px 6px rgba(0,0,0,0.4)';
  panel.innerHTML = `
    <div style="margin-bottom:6px;font-weight:bold;">Page Capture</div>
    <button id="captureStart" style="margin:2px;">Start Capture</button>
    <button id="copyText" style="margin:2px;">Copy Text</button>
    <button id="captureClose" style="margin:2px;">Close</button>
    <div id="captureStatus" style="margin-top:6px;font-size:12px;opacity:0.8;"></div>
  `;

  document.body.appendChild(panel);
  window.__pageCaptureGUI = panel;

  const statusEl = panel.querySelector('#captureStatus');
  const startBtn = panel.querySelector('#captureStart');
  const copyBtn = panel.querySelector('#copyText');
  const closeBtn = panel.querySelector('#captureClose');

  startBtn.onclick = async () => {
    statusEl.textContent = 'Capturing... please wait.';
    await capturePage();
    statusEl.textContent = 'Done! File downloaded.';
  };

  copyBtn.onclick = async () => {
    statusEl.textContent = 'Copying text...';
    await copyPageText();
    statusEl.textContent = 'All text copied to clipboard!';
  };

  closeBtn.onclick = () => {
    panel.remove();
  };
})();
